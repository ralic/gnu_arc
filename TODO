General
-------

- support for separating of source and build directory.  review "outdir"
  properties.  review the ".arc" folder as temporary.  Make sure that all
  tasks use the builddir for temporary files and output (e.g. tar)

- Use arc:try/arc:throw instead of simple logging in tasks.  Make sure that
  tasks don't continue, when prerequisites (missing params, etc) aren't
  met.

- implement the cond, case, begin expressions in meta.scm.

- let tasks register automatically created files (like bison, flex, etc.),
  like arc:register-built-resource does, but save this information across
  arc runs into a database on .arc (or alike).  Declare this generated
  files to be deleted on istclean or clean.


Tasks
-----

- c-compile: extend.  Add more compiler-flag abstractions.  Add support for
  more c compilers (llvm)

- java-compile: extend.  Support more compiler-flags.  Compare different
  compilers (javac, jikes, kopi, etc.) to support a generic api for all.

- implement dependency control for the java compiler.

- implement a ":depends" keyword on the "arc:deps" task.  This will make
  .dep files depend on the source files

- remove the orange tasks

- installation & install-tasks: strip symbols from installed binaries


Documentation
-------------

- put an "exclude:" argument to task-fileset to manual, like this:

(fileset pattern: "src/*.h"
         exclude: "src/version.h")

  i.e. include all .h-files in src except for "version.h"



New stuff
---------

- design a 'task-build': this checksout a module from cvs into a temporary
  directory, calls a arcfile in this module with default task 'all'; if
  that was successfull increase a build number in that local working copy,
  check that build number in.

  needs the following tasks:

  - call arc (in another directory)
  
- need a cool way to parse settings from a arc.config file to the C
  compiler (as -Dxxx=value pairs).  Or better: generate a config.h file and
  parse in the -DHAVE_CONFIG_H key; all the settings would then be
  generated in the config.h file.  this would allow to combine arc with
  autoconf.


- think about an companion system 'arcconfig'.  this takes an Arcreq file
  (a Arc requisites file), where all system requirements and diverse
  information is stated: something in the form:

(test libs
      os: 'linux
      (check-lib pthread-lib
                 libs: '("pthread"))
      (check-lib gc-lib
                 libs: '("gc")
                 depends: '("pthread")) )

(test headers
      os: 'linux
      (or (check-header gc-h
                        file: '("gc.h"))
          (check-header gc-gc-h
                        file: '("gc/gc.h"))))

(process
   (let ((values (make-alist "HAVE_GC_H" (if gc-h "1" "0")
                             "HAVE_GC_GC_H" (if gc-gc-h "1" "0"))))
     (filter src: "config.h.in"
             dest: "config.h"
             values: values))

   (output-arc-config))

This systems works in two steps: first the arc machine loads a global
database configuration, which may be kept up to date by the system admin.
The local Arcreq tests are only done, when no default is setup in the
global database.  In this way, common resource are not necessarily needed
to be scanned over and over again.

- (test ...) expressions have properties (like statements).  The may be
  conditioned by the operating system [if we know, we're having a given
  situation on win32, we don't need to check for everything.]

- there are are predefined checks (like tasks), like check-lib,
  check-header, check-behaviour, check-command.  They set a property in the
  local property-map.  This property map is exported after a successful run
  as "arc.config"


     
Ideas for more Tasks
--------------------

TASKs to be written:

- D compile (gdc, dmd)
- C++ compile
VC tasks:
  - add the missing cvs functions to task-cvs: add, commit, remove, tag
  - git tasks
  - svn tasks
  - monotone tasks
  - hg tasks
- m4 (replacement/extension to task-filter).  Would be cool to have it in
  scheme


Later
-----

- rethink nature of dependencies.  How to decide whether a given stmt is to
  be evaluated dependeing on the modtime/md5-difference between a source
  and a destination file?

- rethink the attrval return types.  They bind tasks very strictly
  together.  Needs a better loose coupling.

